<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: bacs/external/result.proto
//   Date: 2015-11-19 11:44:45

namespace bacs\external\SystemResult {

  class Status extends \DrSlump\Protobuf\Enum {
    const OK = 0;
    const FAIL = 1;
    const PENDING = 100;
    const RUNNING = 101;
  }
}
namespace bacs\external {

  class SystemResult extends \DrSlump\Protobuf\Message {

    /**  @var int - \bacs\external\SystemResult\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.SystemResult');

      // OPTIONAL ENUM status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\SystemResult\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \bacs\external\SystemResult
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \bacs\external\SystemResult\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \bacs\external\SystemResult\Status $value
     * @return \bacs\external\SystemResult
     */
    public function setStatus( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace bacs\external\BuildResult {

  class Status extends \DrSlump\Protobuf\Enum {
    const OK = 0;
    const FAIL = 1;
  }
}
namespace bacs\external {

  class BuildResult extends \DrSlump\Protobuf\Message {

    /**  @var int - \bacs\external\BuildResult\Status */
    public $status = null;
    
    /**  @var string */
    public $output = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.BuildResult');

      // OPTIONAL ENUM status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\BuildResult\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING output = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "output";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \bacs\external\BuildResult
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \bacs\external\BuildResult\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \bacs\external\BuildResult\Status $value
     * @return \bacs\external\BuildResult
     */
    public function setStatus( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <output> has a value
     *
     * @return boolean
     */
    public function hasOutput(){
      return $this->_has(2);
    }
    
    /**
     * Clear <output> value
     *
     * @return \bacs\external\BuildResult
     */
    public function clearOutput(){
      return $this->_clear(2);
    }
    
    /**
     * Get <output> value
     *
     * @return string
     */
    public function getOutput(){
      return $this->_get(2);
    }
    
    /**
     * Set <output> value
     *
     * @param string $value
     * @return \bacs\external\BuildResult
     */
    public function setOutput( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bacs\external\TestResult {

  class Status extends \DrSlump\Protobuf\Enum {
    const OK = 0;
    const ABNORMAL_EXIT = 1;
    const TIME_LIMIT_EXCEEDED = 2;
    const REAL_TIME_LIMIT_EXCEEDED = 3;
    const MEMORY_LIMIT_EXCEEDED = 4;
    const OUTPUT_LIMIT_EXCEEDED = 5;
    const QUERIES_LIMIT_EXCEEDED = 6;
    const WRONG_ANSWER = 100;
    const PRESENTATION_ERROR = 101;
    const INCORRECT_REQUEST = 102;
    const INSUFFICIENT_DATA = 103;
    const EXCESS_DATA = 104;
    const FAIL_TEST = 1000;
    const SKIPPED = 2000;
  }
}
namespace bacs\external {

  class TestResult extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var int - \bacs\external\TestResult\Status */
    public $status = null;
    
    /**  @var string */
    public $judge_message = null;
    
    /**  @var \bacs\external\ResourceUsage */
    public $resource_usage = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.TestResult');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\TestResult\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING judge_message = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "judge_message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE resource_usage = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "resource_usage";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\ResourceUsage';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \bacs\external\TestResult
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \bacs\external\TestResult
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \bacs\external\TestResult
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \bacs\external\TestResult\Status
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \bacs\external\TestResult\Status $value
     * @return \bacs\external\TestResult
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <judge_message> has a value
     *
     * @return boolean
     */
    public function hasJudgeMessage(){
      return $this->_has(3);
    }
    
    /**
     * Clear <judge_message> value
     *
     * @return \bacs\external\TestResult
     */
    public function clearJudgeMessage(){
      return $this->_clear(3);
    }
    
    /**
     * Get <judge_message> value
     *
     * @return string
     */
    public function getJudgeMessage(){
      return $this->_get(3);
    }
    
    /**
     * Set <judge_message> value
     *
     * @param string $value
     * @return \bacs\external\TestResult
     */
    public function setJudgeMessage( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <resource_usage> has a value
     *
     * @return boolean
     */
    public function hasResourceUsage(){
      return $this->_has(4);
    }
    
    /**
     * Clear <resource_usage> value
     *
     * @return \bacs\external\TestResult
     */
    public function clearResourceUsage(){
      return $this->_clear(4);
    }
    
    /**
     * Get <resource_usage> value
     *
     * @return \bacs\external\ResourceUsage
     */
    public function getResourceUsage(){
      return $this->_get(4);
    }
    
    /**
     * Set <resource_usage> value
     *
     * @param \bacs\external\ResourceUsage $value
     * @return \bacs\external\TestResult
     */
    public function setResourceUsage(\bacs\external\ResourceUsage $value){
      return $this->_set(4, $value);
    }
  }
}

namespace bacs\external {

  class TestGroupResult extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var boolean */
    public $executed = null;
    
    /**  @var \bacs\external\TestResult[]  */
    public $test = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.TestGroupResult');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL executed = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "executed";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE test = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "test";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bacs\external\TestResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \bacs\external\TestGroupResult
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \bacs\external\TestGroupResult
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <executed> has a value
     *
     * @return boolean
     */
    public function hasExecuted(){
      return $this->_has(2);
    }
    
    /**
     * Clear <executed> value
     *
     * @return \bacs\external\TestGroupResult
     */
    public function clearExecuted(){
      return $this->_clear(2);
    }
    
    /**
     * Get <executed> value
     *
     * @return boolean
     */
    public function getExecuted(){
      return $this->_get(2);
    }
    
    /**
     * Set <executed> value
     *
     * @param boolean $value
     * @return \bacs\external\TestGroupResult
     */
    public function setExecuted( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <test> has a value
     *
     * @return boolean
     */
    public function hasTest(){
      return $this->_has(3);
    }
    
    /**
     * Clear <test> value
     *
     * @return \bacs\external\TestGroupResult
     */
    public function clearTest(){
      return $this->_clear(3);
    }
    
    /**
     * Get <test> value
     *
     * @param int $idx
     * @return \bacs\external\TestResult
     */
    public function getTest($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <test> value
     *
     * @param \bacs\external\TestResult $value
     * @return \bacs\external\TestGroupResult
     */
    public function setTest(\bacs\external\TestResult $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <test>
     *
     * @return \bacs\external\TestResult[]
     */
    public function getTestList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <test>
     *
     * @param \bacs\external\TestResult $value
     * @return \bacs\external\TestGroupResult
     */
    public function addTest(\bacs\external\TestResult $value){
     return $this->_add(3, $value);
    }
  }
}

namespace bacs\external {

  class ResourceUsage extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $memory_usage_bytes = null;
    
    /**  @var int */
    public $time_usage_millis = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.ResourceUsage');

      // OPTIONAL UINT64 memory_usage_bytes = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "memory_usage_bytes";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 time_usage_millis = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "time_usage_millis";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <memory_usage_bytes> has a value
     *
     * @return boolean
     */
    public function hasMemoryUsageBytes(){
      return $this->_has(1);
    }
    
    /**
     * Clear <memory_usage_bytes> value
     *
     * @return \bacs\external\ResourceUsage
     */
    public function clearMemoryUsageBytes(){
      return $this->_clear(1);
    }
    
    /**
     * Get <memory_usage_bytes> value
     *
     * @return int
     */
    public function getMemoryUsageBytes(){
      return $this->_get(1);
    }
    
    /**
     * Set <memory_usage_bytes> value
     *
     * @param int $value
     * @return \bacs\external\ResourceUsage
     */
    public function setMemoryUsageBytes( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <time_usage_millis> has a value
     *
     * @return boolean
     */
    public function hasTimeUsageMillis(){
      return $this->_has(2);
    }
    
    /**
     * Clear <time_usage_millis> value
     *
     * @return \bacs\external\ResourceUsage
     */
    public function clearTimeUsageMillis(){
      return $this->_clear(2);
    }
    
    /**
     * Get <time_usage_millis> value
     *
     * @return int
     */
    public function getTimeUsageMillis(){
      return $this->_get(2);
    }
    
    /**
     * Set <time_usage_millis> value
     *
     * @param int $value
     * @return \bacs\external\ResourceUsage
     */
    public function setTimeUsageMillis( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bacs\external\SubmitResult {

  class Id extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\Submit\Id */
    public $submit = null;
    
    /**  @var int */
    public $revision = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.SubmitResult.Id');

      // OPTIONAL MESSAGE submit = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "submit";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\Submit\Id';
      $descriptor->addField($f);

      // OPTIONAL UINT64 revision = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "revision";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <submit> has a value
     *
     * @return boolean
     */
    public function hasSubmit(){
      return $this->_has(1);
    }
    
    /**
     * Clear <submit> value
     *
     * @return \bacs\external\SubmitResult\Id
     */
    public function clearSubmit(){
      return $this->_clear(1);
    }
    
    /**
     * Get <submit> value
     *
     * @return \bacs\external\Submit\Id
     */
    public function getSubmit(){
      return $this->_get(1);
    }
    
    /**
     * Set <submit> value
     *
     * @param \bacs\external\Submit\Id $value
     * @return \bacs\external\SubmitResult\Id
     */
    public function setSubmit(\bacs\external\Submit\Id $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <revision> has a value
     *
     * @return boolean
     */
    public function hasRevision(){
      return $this->_has(2);
    }
    
    /**
     * Clear <revision> value
     *
     * @return \bacs\external\SubmitResult\Id
     */
    public function clearRevision(){
      return $this->_clear(2);
    }
    
    /**
     * Get <revision> value
     *
     * @return int
     */
    public function getRevision(){
      return $this->_get(2);
    }
    
    /**
     * Set <revision> value
     *
     * @param int $value
     * @return \bacs\external\SubmitResult\Id
     */
    public function setRevision( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bacs\external\SubmitResult {

  class IdList extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\SubmitResult\Id[]  */
    public $entry = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.SubmitResult.IdList');

      // REPEATED MESSAGE entry = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entry";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bacs\external\SubmitResult\Id';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entry> has a value
     *
     * @return boolean
     */
    public function hasEntry(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entry> value
     *
     * @return \bacs\external\SubmitResult\IdList
     */
    public function clearEntry(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entry> value
     *
     * @param int $idx
     * @return \bacs\external\SubmitResult\Id
     */
    public function getEntry($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entry> value
     *
     * @param \bacs\external\SubmitResult\Id $value
     * @return \bacs\external\SubmitResult\IdList
     */
    public function setEntry(\bacs\external\SubmitResult\Id $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entry>
     *
     * @return \bacs\external\SubmitResult\Id[]
     */
    public function getEntryList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entry>
     *
     * @param \bacs\external\SubmitResult\Id $value
     * @return \bacs\external\SubmitResult\IdList
     */
    public function addEntry(\bacs\external\SubmitResult\Id $value){
     return $this->_add(1, $value);
    }
  }
}

namespace bacs\external\SubmitResult {

  class MultipleId extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\Submit\Id */
    public $submit = null;
    
    /**  @var int[]  */
    public $revision = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.SubmitResult.MultipleId');

      // OPTIONAL MESSAGE submit = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "submit";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\Submit\Id';
      $descriptor->addField($f);

      // REPEATED UINT64 revision = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "revision";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <submit> has a value
     *
     * @return boolean
     */
    public function hasSubmit(){
      return $this->_has(1);
    }
    
    /**
     * Clear <submit> value
     *
     * @return \bacs\external\SubmitResult\MultipleId
     */
    public function clearSubmit(){
      return $this->_clear(1);
    }
    
    /**
     * Get <submit> value
     *
     * @return \bacs\external\Submit\Id
     */
    public function getSubmit(){
      return $this->_get(1);
    }
    
    /**
     * Set <submit> value
     *
     * @param \bacs\external\Submit\Id $value
     * @return \bacs\external\SubmitResult\MultipleId
     */
    public function setSubmit(\bacs\external\Submit\Id $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <revision> has a value
     *
     * @return boolean
     */
    public function hasRevision(){
      return $this->_has(2);
    }
    
    /**
     * Clear <revision> value
     *
     * @return \bacs\external\SubmitResult\MultipleId
     */
    public function clearRevision(){
      return $this->_clear(2);
    }
    
    /**
     * Get <revision> value
     *
     * @param int $idx
     * @return int
     */
    public function getRevision($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <revision> value
     *
     * @param int $value
     * @return \bacs\external\SubmitResult\MultipleId
     */
    public function setRevision( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <revision>
     *
     * @return int[]
     */
    public function getRevisionList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <revision>
     *
     * @param int $value
     * @return \bacs\external\SubmitResult\MultipleId
     */
    public function addRevision( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace bacs\external\SubmitResult {

  class MultipleIdList extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\SubmitResult\MultipleId[]  */
    public $entry = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.SubmitResult.MultipleIdList');

      // REPEATED MESSAGE entry = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entry";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bacs\external\SubmitResult\MultipleId';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entry> has a value
     *
     * @return boolean
     */
    public function hasEntry(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entry> value
     *
     * @return \bacs\external\SubmitResult\MultipleIdList
     */
    public function clearEntry(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entry> value
     *
     * @param int $idx
     * @return \bacs\external\SubmitResult\MultipleId
     */
    public function getEntry($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entry> value
     *
     * @param \bacs\external\SubmitResult\MultipleId $value
     * @return \bacs\external\SubmitResult\MultipleIdList
     */
    public function setEntry(\bacs\external\SubmitResult\MultipleId $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entry>
     *
     * @return \bacs\external\SubmitResult\MultipleId[]
     */
    public function getEntryList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entry>
     *
     * @param \bacs\external\SubmitResult\MultipleId $value
     * @return \bacs\external\SubmitResult\MultipleIdList
     */
    public function addEntry(\bacs\external\SubmitResult\MultipleId $value){
     return $this->_add(1, $value);
    }
  }
}

namespace bacs\external {

  class SubmitResult extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\SubmitResult\Id */
    public $id = null;
    
    /**  @var \bacs\external\SystemResult */
    public $system = null;
    
    /**  @var \bacs\external\BuildResult */
    public $build = null;
    
    /**  @var \bacs\external\TestGroupResult[]  */
    public $test_group = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.SubmitResult');

      // OPTIONAL MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\SubmitResult\Id';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE system = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "system";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\SystemResult';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE build = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "build";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\BuildResult';
      $descriptor->addField($f);

      // REPEATED MESSAGE test_group = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "test_group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bacs\external\TestGroupResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \bacs\external\SubmitResult
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \bacs\external\SubmitResult\Id
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \bacs\external\SubmitResult\Id $value
     * @return \bacs\external\SubmitResult
     */
    public function setId(\bacs\external\SubmitResult\Id $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <system> has a value
     *
     * @return boolean
     */
    public function hasSystem(){
      return $this->_has(2);
    }
    
    /**
     * Clear <system> value
     *
     * @return \bacs\external\SubmitResult
     */
    public function clearSystem(){
      return $this->_clear(2);
    }
    
    /**
     * Get <system> value
     *
     * @return \bacs\external\SystemResult
     */
    public function getSystem(){
      return $this->_get(2);
    }
    
    /**
     * Set <system> value
     *
     * @param \bacs\external\SystemResult $value
     * @return \bacs\external\SubmitResult
     */
    public function setSystem(\bacs\external\SystemResult $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <build> has a value
     *
     * @return boolean
     */
    public function hasBuild(){
      return $this->_has(3);
    }
    
    /**
     * Clear <build> value
     *
     * @return \bacs\external\SubmitResult
     */
    public function clearBuild(){
      return $this->_clear(3);
    }
    
    /**
     * Get <build> value
     *
     * @return \bacs\external\BuildResult
     */
    public function getBuild(){
      return $this->_get(3);
    }
    
    /**
     * Set <build> value
     *
     * @param \bacs\external\BuildResult $value
     * @return \bacs\external\SubmitResult
     */
    public function setBuild(\bacs\external\BuildResult $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <test_group> has a value
     *
     * @return boolean
     */
    public function hasTestGroup(){
      return $this->_has(4);
    }
    
    /**
     * Clear <test_group> value
     *
     * @return \bacs\external\SubmitResult
     */
    public function clearTestGroup(){
      return $this->_clear(4);
    }
    
    /**
     * Get <test_group> value
     *
     * @param int $idx
     * @return \bacs\external\TestGroupResult
     */
    public function getTestGroup($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <test_group> value
     *
     * @param \bacs\external\TestGroupResult $value
     * @return \bacs\external\SubmitResult
     */
    public function setTestGroup(\bacs\external\TestGroupResult $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <test_group>
     *
     * @return \bacs\external\TestGroupResult[]
     */
    public function getTestGroupList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <test_group>
     *
     * @param \bacs\external\TestGroupResult $value
     * @return \bacs\external\SubmitResult
     */
    public function addTestGroup(\bacs\external\TestGroupResult $value){
     return $this->_add(4, $value);
    }
  }
}

namespace bacs\external {

  class SubmitResultList extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\SubmitResult[]  */
    public $entry = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.SubmitResultList');

      // REPEATED MESSAGE entry = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entry";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bacs\external\SubmitResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entry> has a value
     *
     * @return boolean
     */
    public function hasEntry(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entry> value
     *
     * @return \bacs\external\SubmitResultList
     */
    public function clearEntry(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entry> value
     *
     * @param int $idx
     * @return \bacs\external\SubmitResult
     */
    public function getEntry($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entry> value
     *
     * @param \bacs\external\SubmitResult $value
     * @return \bacs\external\SubmitResultList
     */
    public function setEntry(\bacs\external\SubmitResult $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entry>
     *
     * @return \bacs\external\SubmitResult[]
     */
    public function getEntryList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entry>
     *
     * @param \bacs\external\SubmitResult $value
     * @return \bacs\external\SubmitResultList
     */
    public function addEntry(\bacs\external\SubmitResult $value){
     return $this->_add(1, $value);
    }
  }
}

