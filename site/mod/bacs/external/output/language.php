<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: bacs/external/language.proto
//   Date: 2015-11-19 11:44:45

namespace bacs\external\Language {

  class Id extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Language.Id');

      // OPTIONAL STRING value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \bacs\external\Language\Id
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \bacs\external\Language\Id
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace bacs\external\Language {

  class Info extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Language.Info');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \bacs\external\Language\Info
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \bacs\external\Language\Info
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <description> value
     *
     * @return \bacs\external\Language\Info
     */
    public function clearDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \bacs\external\Language\Info
     */
    public function setDescription( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bacs\external\Language {

  class InfoEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \bacs\external\Language\Info */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Language.InfoEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\Language\Info';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \bacs\external\Language\InfoEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \bacs\external\Language\InfoEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \bacs\external\Language\InfoEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \bacs\external\Language\Info
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \bacs\external\Language\Info $value
     * @return \bacs\external\Language\InfoEntry
     */
    public function setValue(\bacs\external\Language\Info $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bacs\external {

  class Language extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\Language\Id */
    public $id = null;
    
    /**  @var \bacs\external\Language\InfoEntry[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Language');

      // OPTIONAL MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\Language\Id';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bacs\external\Language\InfoEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \bacs\external\Language
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \bacs\external\Language\Id
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \bacs\external\Language\Id $value
     * @return \bacs\external\Language
     */
    public function setId(\bacs\external\Language\Id $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info> value
     *
     * @return \bacs\external\Language
     */
    public function clearInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \bacs\external\Language\InfoEntry
     */
    public function getInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \bacs\external\Language\InfoEntry $value
     * @return \bacs\external\Language
     */
    public function setInfo(\bacs\external\Language\InfoEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \bacs\external\Language\InfoEntry[]
     */
    public function getInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \bacs\external\Language\InfoEntry $value
     * @return \bacs\external\Language
     */
    public function addInfo(\bacs\external\Language\InfoEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace bacs\external {

  class LanguageList extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\Language[]  */
    public $entry = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.LanguageList');

      // REPEATED MESSAGE entry = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entry";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bacs\external\Language';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entry> has a value
     *
     * @return boolean
     */
    public function hasEntry(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entry> value
     *
     * @return \bacs\external\LanguageList
     */
    public function clearEntry(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entry> value
     *
     * @param int $idx
     * @return \bacs\external\Language
     */
    public function getEntry($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entry> value
     *
     * @param \bacs\external\Language $value
     * @return \bacs\external\LanguageList
     */
    public function setEntry(\bacs\external\Language $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entry>
     *
     * @return \bacs\external\Language[]
     */
    public function getEntryList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entry>
     *
     * @param \bacs\external\Language $value
     * @return \bacs\external\LanguageList
     */
    public function addEntry(\bacs\external\Language $value){
     return $this->_add(1, $value);
    }
  }
}

