<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: bacs/external/submit.proto
//   Date: 2015-11-19 11:44:45

namespace bacs\external\Submit {

  class Id extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Submit.Id');

      // OPTIONAL UINT64 value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \bacs\external\Submit\Id
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param int $value
     * @return \bacs\external\Submit\Id
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace bacs\external\Submit {

  class IdList extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\Submit\Id[]  */
    public $entry = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Submit.IdList');

      // REPEATED MESSAGE entry = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entry";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bacs\external\Submit\Id';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entry> has a value
     *
     * @return boolean
     */
    public function hasEntry(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entry> value
     *
     * @return \bacs\external\Submit\IdList
     */
    public function clearEntry(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entry> value
     *
     * @param int $idx
     * @return \bacs\external\Submit\Id
     */
    public function getEntry($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entry> value
     *
     * @param \bacs\external\Submit\Id $value
     * @return \bacs\external\Submit\IdList
     */
    public function setEntry(\bacs\external\Submit\Id $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entry>
     *
     * @return \bacs\external\Submit\Id[]
     */
    public function getEntryList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entry>
     *
     * @param \bacs\external\Submit\Id $value
     * @return \bacs\external\Submit\IdList
     */
    public function addEntry(\bacs\external\Submit\Id $value){
     return $this->_add(1, $value);
    }
  }
}

namespace bacs\external\Submit {

  class Author extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $user_login = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Submit.Author');

      // OPTIONAL STRING user_login = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "user_login";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <user_login> has a value
     *
     * @return boolean
     */
    public function hasUserLogin(){
      return $this->_has(1);
    }
    
    /**
     * Clear <user_login> value
     *
     * @return \bacs\external\Submit\Author
     */
    public function clearUserLogin(){
      return $this->_clear(1);
    }
    
    /**
     * Get <user_login> value
     *
     * @return string
     */
    public function getUserLogin(){
      return $this->_get(1);
    }
    
    /**
     * Set <user_login> value
     *
     * @param string $value
     * @return \bacs\external\Submit\Author
     */
    public function setUserLogin( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace bacs\external\Submit {

  class Source extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $data = null;
    
    /**  @var \bacs\external\Language\Id */
    public $language = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Submit.Source');

      // OPTIONAL BYTES data = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "language";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\Language\Id';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(1);
    }
    
    /**
     * Clear <data> value
     *
     * @return \bacs\external\Submit\Source
     */
    public function clearData(){
      return $this->_clear(1);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(1);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \bacs\external\Submit\Source
     */
    public function setData( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <language> value
     *
     * @return \bacs\external\Submit\Source
     */
    public function clearLanguage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <language> value
     *
     * @return \bacs\external\Language\Id
     */
    public function getLanguage(){
      return $this->_get(2);
    }
    
    /**
     * Set <language> value
     *
     * @param \bacs\external\Language\Id $value
     * @return \bacs\external\Submit\Source
     */
    public function setLanguage(\bacs\external\Language\Id $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bacs\external {

  class Submit extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\Submit\Id */
    public $id = null;
    
    /**  @var \bacs\external\Submit\Author */
    public $author = null;
    
    /**  @var \bacs\external\Problem\Id */
    public $problem = null;
    
    /**  @var \bacs\external\Submit\Source */
    public $source = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.Submit');

      // OPTIONAL MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\Submit\Id';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE author = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "author";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\Submit\Author';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE problem = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "problem";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\Problem\Id';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE source = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "source";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bacs\external\Submit\Source';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \bacs\external\Submit
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \bacs\external\Submit\Id
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \bacs\external\Submit\Id $value
     * @return \bacs\external\Submit
     */
    public function setId(\bacs\external\Submit\Id $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <author> has a value
     *
     * @return boolean
     */
    public function hasAuthor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <author> value
     *
     * @return \bacs\external\Submit
     */
    public function clearAuthor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <author> value
     *
     * @return \bacs\external\Submit\Author
     */
    public function getAuthor(){
      return $this->_get(2);
    }
    
    /**
     * Set <author> value
     *
     * @param \bacs\external\Submit\Author $value
     * @return \bacs\external\Submit
     */
    public function setAuthor(\bacs\external\Submit\Author $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <problem> has a value
     *
     * @return boolean
     */
    public function hasProblem(){
      return $this->_has(3);
    }
    
    /**
     * Clear <problem> value
     *
     * @return \bacs\external\Submit
     */
    public function clearProblem(){
      return $this->_clear(3);
    }
    
    /**
     * Get <problem> value
     *
     * @return \bacs\external\Problem\Id
     */
    public function getProblem(){
      return $this->_get(3);
    }
    
    /**
     * Set <problem> value
     *
     * @param \bacs\external\Problem\Id $value
     * @return \bacs\external\Submit
     */
    public function setProblem(\bacs\external\Problem\Id $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <source> has a value
     *
     * @return boolean
     */
    public function hasSource(){
      return $this->_has(4);
    }
    
    /**
     * Clear <source> value
     *
     * @return \bacs\external\Submit
     */
    public function clearSource(){
      return $this->_clear(4);
    }
    
    /**
     * Get <source> value
     *
     * @return \bacs\external\Submit\Source
     */
    public function getSource(){
      return $this->_get(4);
    }
    
    /**
     * Set <source> value
     *
     * @param \bacs\external\Submit\Source $value
     * @return \bacs\external\Submit
     */
    public function setSource(\bacs\external\Submit\Source $value){
      return $this->_set(4, $value);
    }
  }
}

namespace bacs\external {

  class SubmitList extends \DrSlump\Protobuf\Message {

    /**  @var \bacs\external\Submit[]  */
    public $entry = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bacs.external.SubmitList');

      // REPEATED MESSAGE entry = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entry";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bacs\external\Submit';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entry> has a value
     *
     * @return boolean
     */
    public function hasEntry(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entry> value
     *
     * @return \bacs\external\SubmitList
     */
    public function clearEntry(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entry> value
     *
     * @param int $idx
     * @return \bacs\external\Submit
     */
    public function getEntry($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entry> value
     *
     * @param \bacs\external\Submit $value
     * @return \bacs\external\SubmitList
     */
    public function setEntry(\bacs\external\Submit $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entry>
     *
     * @return \bacs\external\Submit[]
     */
    public function getEntryList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entry>
     *
     * @param \bacs\external\Submit $value
     * @return \bacs\external\SubmitList
     */
    public function addEntry(\bacs\external\Submit $value){
     return $this->_add(1, $value);
    }
  }
}

